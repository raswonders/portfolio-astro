---
import Navbar from "../../../components/Navbar.astro";
import Layout from "../../../layouts/Layout.astro";
import ProjectLayout from "../../../layouts/ProjectLayout.astro";
import { Image } from "astro:assets";
import titleImage from "../../../assets/projects/2/title.webp";
---

<Layout>
  <Navbar />
  <ProjectLayout id="2">
    <div class="col-span-2">
      <Image src={titleImage} alt="Tibi-English.sk" />
    </div>
    <section class="space-y-8 max-w-prose">
      <h1 class="text-3xl font-extrabold">Project's Goal</h1>
      <p>
        Create a website to showcase an English tutorâ€™s services, strengthen
        their brand, and help to convert potential clients
      </p>
    </section>

    <section
      class="grid md:grid-cols-2 gap-y-16 md:gap-y-32 gap-x-8 items-start"
    >
      <section class="order-1 md:order-2 space-y-4">
        <h1 class="text-3xl font-extrabold">Challenges</h1>
        <h2 class="text-xl font-extrabold">No-Code Built</h2>
        <p>
          Before starting this project I've been toying with an idea of building
          frontend project with some sort of no code solution. I didn't know
          much about them before I started, but I've seen many people on YT
          crafting interfaces while moving pretty fast and that intrigued me.
          After short research I came to conclusion <em>Webflow</em> is the product
          I want to try. It was popular, had rich ecosystem of nicely designed templates
          and its UI seemed well thought through and kind of reminded me <em
            >Figma</em
          >.
        </p>
        <p>
          I started with going over some learning courses on <a
            href="https://university.webflow.com/">Webflow University</a
          >, which by the way were super high production value videos and were
          also pretty funny. Once I felt accustomed with the tooling I started
          building the site. Clicking and dragging elements felt little awkward
          at first but after short while I got hang of it and honestly quite
          liked it. Tinkering with controls again felt like I was in figma and
          things building layout visually required very little cognitive effort.
          I understood why this tool got so popular.
        </p>
        <p>
          Once page was finished and hosting costs for page itself and <em
            >CMS</em
          > came into full picture, I realized my client won't be willing spending
          as much for hosting, nor he should. That sparked an idea in me of migrating
          the page to a hosting provider with lower fees. Fortunately Webflow platform
          allows export into code natively. Even though the code isn't the prettiest,
          it's readable and to some degree maintainable for little projects like
          this one.
        </p>
      </section>

      <section class="order-3 space-y-4">
        <h2 class="text-xl font-extrabold">Migrating to Astro + Sanity</h2>
        <p>
          After careful consideration I decided to migrate project into <em
            >Astro.js</em
          >, content-focused framework with great load times. I got ok from
          client and proceeded moving everything I could as it was and reworked
          only the parts which were absolutely necessary due to their reliance
          on Webflow platform. Things like an Offer component using dynamic
          content or Contact Form.
        </p>
        <p>
          My choice for backend was headless CMS <em>Sanity.io</em>. It's well
          established, has good UI and provides its own hosting for studio
          access. For hosting static site I chose <em>Netlify</em> that provided
          its own Form service which I used for the Contact Form. Its free tier included
          free hosting and 100 notification emails a month, more than my client really
          needed.
        </p>
        <p>
          Due to migration I lowered hosting fees to minimum for my client,
          which was a big win. Although the process itself wasn't without its
          negatives. Besides extra work, needed the biggest one in my opinion
          was worsen code readability. Migrated code was using third party
          symbols imported from Webflow which had no semantic meaning and it was
          hard to understand what they actually do. This makes potential future
          work in this codebase more expensive. Next overall code structure was
          also not optimal, as it wasn't designed for Astro.js in the first
          place. Arguably this could be improved by further refactoring which
          would come with additional cost.
        </p>
      </section>
    </section>
    <section class="space-y-8 max-w-prose">
      <h1 class="text-3xl font-extrabold">Lessons Learned</h1>
      <div class="space-y-4">
        <p>
          Even though this project wasn't technically difficult at its core it
          helped me to widen my horizons in Frontend quite a bit. I've learned
          about no-code solution to a website design and I realized that even if
          it can feel nice to build interfaces via GUI, it's probably not for me
          as it has significant on my coding skills.
        </p>
        <p>
          By working on this project I've discovered various complications which
          can arise during migrations from one tech stack to another. I'm much
          more careful now considering various options and their impact before I
          commit my project to some technology in particular.
        </p>
      </div>
    </section>
  </ProjectLayout>
</Layout>

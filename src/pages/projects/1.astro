---
import Navbar from "../../components/Navbar.astro";
import Layout from "../../layouts/Layout.astro";
import ProjectLayout from "../../layouts/ProjectLayout.astro";
---

<Layout>
  <Navbar />
  <ProjectLayout id="1">
    <div class="col-span-2 -mt-16">
      <img src="/images/title.webp" alt="Member's table screenshot" />
    </div>
    <section class="space-y-8">
      <h1 class="text-3xl font-extrabold">Project's Goal</h1>
      <p>
        Club 101 is a private nightclub in Rome, Italy. As a private club, all
        of its visitors must be registered members. Due to its recent rise in
        popularity, the club gets hundreds of individuals visiting each night.
        The goal of this app is to help the club's staff handle the managerial
        load connected with members, whose number rises every day.
      </p>
    </section>

    <section class="space-y-8 grid md:grid-cols-2 gap-x-8 gap-y-8">
      <section class="order-1 md:order-2 space-y-4">
        <h1 class="text-3xl font-extrabold">Challenges</h1>
        <h2 class="text-xl font-extrabold">UI Design</h2>
        <p>
          From the start, it was clear that information clarity would be one of
          the top priorities. To achieve this, I decided to use <em
            >Shadcn/ui</em
          >, a clean-looking and proven React component library built on <em
            >Radix UI</em
          >, well known for its excellent accessibility.
        </p>
        <p>
          The visual theme, including the color system, was heavily inspired by
          <em>Radix Themes'</em> style guide. While the app supports both light and
          dark modes, I put most of my efforts into optimizing the dark mode experience,
          considering the nightclub's working hours.
        </p>
        <p>
          Because not all of the club's staff are fluent in either English or
          Italian, there was a requirement to have the UI bilingual, supporting
          both languages. I addressed this by keeping text information separate
          and dynamically loading it based on the preferred option.
        </p>
      </section>

      <div
        class="order-2 md:order-1 flex flex-col items-center justify-center text-3xl font-bold"
      >
        <img class="h-8" src="/icons/radix.svg" alt="Radix Themes logo" />
        <span>+</span>
        <div class="flex gap-1">
          <img class="w-8" src="/icons/shadcn.svg" alt="Shadcn/ui logo" />
          <span>shadcn/ui</span>
        </div>
      </div>

      <section class="order-3 space-y-4">
        <h2 class="text-xl font-extrabold">Presenting Member Data</h2>
        <p>
          The club is quite popular, already having a substantial database of
          over 20,000 members. For each member, it has to manage detailed
          information, including personal, membership, suspension details, and
          account notes. This data needs to be easily accessible and visually
          clear for club staff across a variety of devices.
        </p>
        <p>
          To meet these expectations, I decided to use <em>TanStack Table</em>,
          a type-safe React library that integrates seamlessly with our
          component library and provides great features. For instance, it offers
          client-side filtering, pagination, and more. To make browsing and
          pagination more seamless, I used infinite scrolling backed by <em
            >TanStack Query</em
          > as a caching solution and state manager.
        </p>
      </section>
      <div
        class="order-4 max-w-80 rounded-lg overflow-hidden flex justify-self-center"
      >
        <img src="/images/iphone12.webp" alt="Members table iphone mockup" />
      </div>

      <section class="order-5 md:order-6 space-y-4">
        <h2 class="text-xl font-extrabold">Efficient Check-in</h2>
        <p>
          During rush hour, the club often sees tens of visitors arriving
          simultaneously. They all need to go through the check-in process
          before entering. Hence, check-in can become a significant bottleneck
          in the clubâ€™s operations. It involves searching for existing members,
          renewing expired memberships, and registering new ones.
        </p>
        <p>
          To streamline this process and make it as seamless as possible, the
          app needed a great form UI. Fortunately, Shadcn/ui integrates well
          with <em>React Hook Form</em>. This library is not only type-safe but
          offers robust input validation and has become a <i>de facto</i> standard
          in the React ecosystem. In addition to using a trusted library, I ensured
          that the form fields can be quickly navigated using just a keyboard and
          are optimized for use across a wide range of devices. Part of this process
          was the creation of a custom <em>DateField</em> component, which I'm quite
          proud of as it required quite a bit of work to feel right and allow quick
          input.
        </p>
      </section>

      <div
        class="order-6 md:order-5 max-w-80 flex rounded-lg overflow-hidden justify-self-center"
      >
        <img src="/images/add-member.png" alt="Add member form" />
      </div>
    </section>
    <section class="space-y-8">
      <h1 class="text-3xl font-extrabold">Lessons Learned</h1>
      <div class="space-y-4">
        <p>
          Even though the project isn't finished yet, I already consider it a
          significant learning experience. While working on it, I've discovered
          how invaluable the type system can be, particularly for maintaining
          and revisiting my own codebase. Returning to a project after even a
          month-long break felt daunting at first, but having type-fueled code
          suggestions made the process much easier. It helped me to quickly
          orient myself in the code and reduce uncertainty and second-guessing.
        </p>
        <p>
          I also delved deeper into working with forms. Optimizing them for the
          check-in process had its own set of challenges. Figuring out what to
          improve and how to implement those improvements was a rewarding
          journey.
        </p>
        <p>
          Finally, I got to know some very cool technologies like React Hook
          Form, TanStack Table, and TanStack Query. I'll definitely be diving
          deeper into them and using them more often.
        </p>
      </div>
    </section>
  </ProjectLayout>
</Layout>

---
import Navbar from "../components/Navbar.astro";
import Layout from "../layouts/Layout.astro";
import PageLayout from "../layouts/PageLayout.astro";

const isValidEmail = (email: string) => {
  return email.includes("@");
};

async function sendMail(data: FormData) {
  const url = "https://api.sendgrid.com/v3/mail/send";
  const message = `Name: ${data.get("name")}\n\n Email: ${data.get("email")}\n\n Message: ${data.get("message")}`;
  const emailData = {
    personalizations: [
      {
        to: [{ email: "rastislav.hepner@gmail.com" }],
      },
    ],
    from: { email: "rastislav.hepner@gmail.com" },
    subject: "Someone reached out from your portfolio",
    content: [
      {
        type: "text/plain",
        value: message,
      },
    ],
  };

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${import.meta.env.SENDGRID_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: await JSON.stringify(emailData),
    });

    if (!response.ok) {
      throw new Error(`status ${response.status}`);
    }
  } catch (error) {
    console.error(error);
    // TODO handle send error gracefully
  }
}

let formData;
const errors = { name: "", email: "", message: "" };

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    formData = {
      name: data.get("name"),
      email: data.get("email"),
      message: data.get("message"),
    };

    if (typeof formData.name !== "string") {
      errors.name = "Invalid name";
    }
    if (typeof formData.email !== "string" || !isValidEmail(formData.email)) {
      errors.email = "Invalid email";
    }
    if (typeof formData.message !== "string") {
      errors.message = "Invalid message";
    }

    sendMail(data);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout>
  <Navbar />
  <PageLayout>
    <h1 class="flex flex-col text-4xl md:text-5xl font-black">
      <span
        >Let's build something <span class="text-slate-500">together</span
        ></span
      >
    </h1>
    <form class="grow flex flex-col max-w-2xl space-y-6" method="POST">
      <div class="flex flex-col space-y-2">
        <label for="name">Name</label>
        <input class="p-2 border" name="name" id="name" type="text" />
        {errors.name && <p class="text-red-500">{errors.name}</p>}
      </div>
      <div class="flex flex-col space-y-2">
        <label for="email">Email</label>
        <input
          class="p-2 border"
          name="email"
          id="email"
          type="email"
          required
        />
        {errors.email && <p class="text-red-500">{errors.email}</p>}
      </div>
      <div class="flex flex-col space-y-2">
        <label for="message">Message</label>
        <textarea
          class="p-2 border min-h-28 resize-y"
          name="message"
          id="message"
          placeholder=""></textarea>
        {errors.message && <p class="text-red-500">{errors.message}</p>}
      </div>
      <input
        class="sm:place-self-end px-6 py-4 text-lg font-semibold bg-black text-white outline-offset-4"
        type="submit"
        value="Send"
      />
    </form>
  </PageLayout>
</Layout>
